다익스트라 알고리즘
https://m.blog.naver.com/ndb796/221234424646

시작하기 전에 다이나믹 프로그래밍이란?
큰 문제를 한 번에 해결하기 힘들 때 작은 여러 개의 문제로 나누어서 푸는 기법이다.
작은 문제들을 풀다보면 같은 문제들을 반복해서 푸는 경우가 생긴다.
그 문제들을 매번 재계산 하지 않고 효율적으로 값을 저장해두었다가 재사용하는 기법이다.
동적 프로그래밍이라고 부른다.
https://www.zerocho.com/category/Algorithm/post/584b979a580277001862f182

정의 : 다이나믹 프로그래밍을 활용한 대표적인 최단 경로 탐색 알고리즘이다.
+ 최단 거리가 여러개의 최단 거리로 이루어져있기 때문에 다이나믹 프로그래밍이다.
대표적으로 쓰이는 곳 : 인공위성 GPS 소프트웨어
하는 일 : 특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로를 알려줌
단점 : 음의 간선을 포함할 수 없음, 그래서 GPS같은 현실에서 쓰기 좋은 알고리즘이다.
하나의 최단 거리를 구할 때 이전까지 구했던 쵣나 거리 정보를 그대로 사용한다는 특징이있음.
다익스트라는 현재까지 알고 있던 최단 경로를 계속해서 갱신한다.
다익스트라의 작동 과정
1. 출발 노드를 설정한다.
2. 출발 노드를 기준으로 각 노드의 최소 비용을 저장한다.
3. 방문하지 않은 노드 중에 가장 비용이 적은 노드를 선택한다.
4. 해당 노드를 거쳐서 특정한 노드로 가는 경우를 고려하여 최소 비용을 갱신한다.
위 과정을 반복한다.

*코드
그래프를 초기화할때 자기 자신의 번호는 0으로 초기화함
다익스트라 함수를 실행할때 처음에 시작 노드부터 다른 노드까지의 거리를 가져옴
v[start] = true로 start번째 노드를 방문한 노드로 설정함
다음 노드로 가기위해 getSmallIndex함수를 실행시켜서 current 변수에 값을 리턴함
current 변수에 방문하지 않은 노드중에 가장 작은 값을 넣고, 방문을 한걸로 바꿈

방문하지 않은 노드를 순환하며 조건문을 돌림
만약 (전 노드에서 현재 노드의 거리 + j번째 노드 거리)가  전 노드에서 드는 코스트보다 적다면
코스트를 업데이트함
1 + 2 = 3 
3 < 2 == false 안바꿈
1 + 3 = 4
4 < 5 == true 바꿈
1 + 1 = 2
2 < INF == true 바꿈

1번 노드와 4번 노드는 이미 방문한 노드이기 떄문에 순환하지 않음
6번 노드는 비교는 하지만 비교하기 전과 비교 후가 둘다 접근 불가 즉 INF기 때문에
업데이트 되지 않고 그대로 유지됨
이 과정을 노드의 개수만큼 반복하면 됨

선형 탐색은 차례대로 즉 순차적으로 배열을 순환하는 방식이다.
위 알고리즘은 최소 비용을 단순히 선형 탐색으로 찾도록 만듬 (시간 복잡도 = O(N^2)
빠르게 작동시켜야하면 힙 구조를 활용하여 시간 복잡도 O(N*log N)을 만들 수 있음.
위 알고리즘을 사용할 시 정점의 갯수가 많은데 간선은 적을 때 치명적일 정도로 비효율일 수 있음.

간선 : 노드에서 노드로가는 선
인접 리스트란 그래프의 연결 관계를 vector의 배열로 나타내는 방식이다.
보통 vector<pair<int,int>>로 선언하여 first에는 노드의 번호, second에는 간선의 가중치를 저장한다.
인접 리스트의 장점은 간선의 개수에 비례하는 메모리만 차지한다.
인접 리스트의 단점은 각자 다른 노드가 서로 연결되어 있는지 확인하려면 벡터 전체를 돌며 확인해야한다.
https://sarah950716.tistory.com/12

두 번째 알고리즘은 인접 리스트 방식을 활용하여 시간 복잡도를 O(N * log N)으로 구현한 것임
이 알고리즘은 정점에 비해 간선의 갯수가 비정상적으로 적어도 안정적으로 처리할 수 있다.

두 번째 알고리즘 코드 *
일반적인 큐를 사용하지 않고 우선순위 큐를 사용한다.
Queue는 선입선출 구조이다. 어떤 부가적인 조건 없이 먼저 들어온 데이터가 먼저 나간다.

하지만 우선순위 큐는 들어간 순서에 상관없이 우선순위가 높은 데이터가 먼저 나오는 것이다. (완벽 이진 트리)
우선순위 큐는 힙이라는 자료구조를 가지고 구현할 수 있다. ( 최소 힙)
우선순위가 높을 수록 코스트가 작기 때문에 비교하기 쉽고 효율적임
https://chanhuiseok.github.io/posts/ds-4/


